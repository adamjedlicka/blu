class PriorityQueue {
    fn __init() {
        this.arr = []
        this.size = 0
    }

    fn trickleUp(i) {
        if i == 0 : return

        var parent = int(i / 2)

        if this.arr[parent] > this.arr[i] {
            var tmp = this.arr[parent]
            this.arr[parent] = this.arr[i]
            this.arr[i] = tmp

            this.trickleUp(parent)
        }
    }

    fn trickleDown(i) {
        var left = i * 2 + 1
        var right = i * 2 + 2
        var lesser = 0

        if left < this.last() {
            if right < this.last() {
                if this.arr[left] < this.arr[right] {
                    lesser = left
                } else {
                    lesser = right
                }
            } else {
                lesser = left
            }
        } else {
            return
        }

        if this.arr[lesser] < this.arr[i] {
            var tmp = this.arr[lesser]
            this.arr[lesser] = this.arr[i]
            this.arr[i] = tmp

            this.trickleDown(lesser)
        }
    }

    fn push(val) {
        print(this.arr)

        if this.last() < len(this.arr) {
            this.arr[this.last()] = val
        } else {
            this.arr[] = val
        }

        this.size = this.size + 1

        this.trickleUp(this.last() - 1)

        print(".push(" + val + ") => ")
        println(this.arr)

        return this
    }

    fn pop() {
        print(this.arr)

        var val = this.arr[0]

        var i = this.last() - 1
        this.arr[0] = this.arr[i]

        this.size = this.size - 1

        this.trickleDown(0)

        print(".pop() => ")
        println(this.arr)

        return val
    }

    fn last() {
        return this.size
    }

    fn len() {
        return len(this.arr)
    }
}

var q = PriorityQueue()
assert q.len() == 0
assert q.last() == 0

q.push(5)
assert q.len() == 1
assert q.last() == 1

q.push(3)
assert q.len() == 2
assert q.last() == 2

q.push(8)
assert q.len() == 3
assert q.last() == 3

q.push(1)
assert q.len() == 4
assert q.last() == 4

assert q.pop() == 1
assert q.len() == 4
assert q.last() == 3

assert q.pop() == 3
assert q.len() == 4
assert q.last() == 2

q.push(2)
assert q.len() == 4
assert q.last() == 3

q.push(4)
assert q.len() == 4
assert q.last() == 4

q.push(0)
assert q.len() == 5
assert q.last() == 5

assert q.pop() == 0
assert q.len() == 5
assert q.last() == 4

assert q.pop() == 2
assert q.len() == 5
assert q.last() == 3
