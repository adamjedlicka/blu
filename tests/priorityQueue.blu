class PriorityQueue {
    fn __init() {
        @arr = []
        @size = 0
    }

    fn trickleUp(i) {
        if i == 0 : return

        var parent = int(i / 2)

        if @arr[parent] > @arr[i] {
            var tmp = @arr[parent]
            @arr[parent] = @arr[i]
            @arr[i] = tmp

            @trickleUp(parent)
        }
    }

    fn trickleDown(i) {
        var left = i * 2 + 1
        var right = i * 2 + 2
        var lesser = 0

        if left < @last() {
            if right < @last() {
                if @arr[left] < @arr[right] {
                    lesser = left
                } else {
                    lesser = right
                }
            } else {
                lesser = left
            }
        } else {
            return
        }

        if @arr[lesser] < @arr[i] {
            var tmp = @arr[lesser]
            @arr[lesser] = @arr[i]
            @arr[i] = tmp

            @trickleDown(lesser)
        }
    }

    fn push(val) {
        print(@arr)

        if @last() < len(@arr) {
            @arr[@last()] = val
        } else {
            @arr[] = val
        }

        @size = @size + 1

        @trickleUp(@last() - 1)

        print(".push(" + val + ") => ")
        println(@arr)

        return @
    }

    fn pop() {
        print(@arr)

        var val = @arr[0]

        var i = @last() - 1
        @arr[0] = @arr[i]

        @size = @size - 1

        @trickleDown(0)

        print(".pop() => ")
        println(@arr)

        return val
    }

    fn last() {
        return @size
    }

    fn len() {
        return len(@arr)
    }
}

var q = PriorityQueue()
assert q.len() == 0
assert q.last() == 0

q.push(5)
assert q.len() == 1
assert q.last() == 1

q.push(3)
assert q.len() == 2
assert q.last() == 2

q.push(8)
assert q.len() == 3
assert q.last() == 3

q.push(1)
assert q.len() == 4
assert q.last() == 4

assert q.pop() == 1
assert q.len() == 4
assert q.last() == 3

assert q.pop() == 3
assert q.len() == 4
assert q.last() == 2

q.push(2)
assert q.len() == 4
assert q.last() == 3

q.push(4)
assert q.len() == 4
assert q.last() == 4

q.push(0)
assert q.len() == 5
assert q.last() == 5

assert q.pop() == 0
assert q.len() == 5
assert q.last() == 4

assert q.pop() == 2
assert q.len() == 5
assert q.last() == 3
