// Generated automatically from src/vm/core/core.blu. Do not edit.
static const char* coreSource =
"class Object {\n"
"    // fn getClass()\n"
"    // fn isFalsey()\n"
"    // fn isTruthy()\n"
"\n"
"    static fn getClass(): Class\n"
"\n"
"    fn isNil(): false\n"
"    fn equals(other): @ == other\n"
"}\n"
"\n"
"class Nil {\n"
"    fn isNil(): true\n"
"}\n"
"\n"
"class Bool {\n"
"\n"
"}\n"
"\n"
"class Number {\n"
"    fn times(callback) {\n"
"        var result = []\n"
"\n"
"        for var i = 0; i < @; i = i + 1 {\n"
"            result.push(callback(i))\n"
"        }\n"
"\n"
"        return result\n"
"    }\n"
"}\n"
"\n"
"class Array {\n"
"    // fn push(value)\n"
"    // fn len()\n"
"\n"
"    fn filter(callback) {\n"
"        var arr = []\n"
"\n"
"        for var i = 0; i < @len(); i = i + 1 {\n"
"            if callback(@[i]) == true {\n"
"                arr.push(@[i])\n"
"            }\n"
"        }\n"
"\n"
"        return arr\n"
"    }\n"
"\n"
"    fn map(callback) {\n"
"        var arr = []\n"
"\n"
"        for var i = 0; i < @len(); i = i + 1 {\n"
"            arr.push(callback(@[i]))\n"
"        }\n"
"\n"
"        return arr\n"
"    }\n"
"\n"
"    fn reduce(callback, accumulator) {\n"
"        for var i = 0; i < @len(); i = i + 1 {\n"
"            accumulator = callback(accumulator, @[i])\n"
"        }\n"
"\n"
"        return accumulator\n"
"    }\n"
"\n"
"    fn join(separator) {\n"
"        if @.len() == 0: return nil\n"
"\n"
"        var accumulator = @[0]\n"
"\n"
"        for var i = 1; i < @len(); i = i + 1 {\n"
"            accumulator = accumulator + separator + @[i]\n"
"        }\n"
"\n"
"        return accumulator\n"
"    }\n"
"\n"
"    fn equals(other) {\n"
"        if other.getClass() != Array: return false\n"
"        if other.len() != @len(): return false\n"
"\n"
"        for var i = 0; i < @len(); i = i + 1 {\n"
"            if @[i].equals(other[i]) == false: return false\n"
"        }\n"
"\n"
"        return true\n"
"    }\n"
"}\n"
"\n"
"class Class {\n"
"\n"
"}\n"
"\n"
"class Function {\n"
"\n"
"}\n"
"\n"
"class String {\n"
"\n"
"}\n";
